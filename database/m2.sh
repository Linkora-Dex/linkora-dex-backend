#!/bin/bash

# Copyright (C) 2025 Linkora DEX
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# For commercial licensing, contact: licensing@linkora.info


echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö crypto_data –¥–ª—è order_system..."

DB_EXISTS=$(docker exec crypto_timescaledb psql -U crypto_user -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='crypto_data'")

if [ "$DB_EXISTS" = "1" ]; then
    echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö crypto_data —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    if docker exec crypto_timescaledb psql -U crypto_user -d postgres -c "CREATE DATABASE crypto_data;"; then
        echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö crypto_data —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö crypto_data"
        exit 1
    fi
fi

echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è TimescaleDB..."

if docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"; then
    echo "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ TimescaleDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
else
    echo "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è TimescaleDB"
    exit 1
fi

echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è compression policies..."

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE OR REPLACE FUNCTION integer_now_func() RETURNS BIGINT
LANGUAGE SQL STABLE AS \$\$
SELECT EXTRACT(epoch FROM NOW())::BIGINT * 1000;
\$\$;

CREATE OR REPLACE FUNCTION timestamp_now_func() RETURNS TIMESTAMP
LANGUAGE SQL STABLE AS \$\$
SELECT NOW()::TIMESTAMP;
\$\$;"

if [ $? -eq 0 ]; then
    echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è compression policies —Å–æ–∑–¥–∞–Ω—ã"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"
    exit 1
fi

echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü order_system..."

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE TABLE IF NOT EXISTS orders
(
    id BIGINT PRIMARY KEY,
    user_address VARCHAR(42) NOT NULL,
    token_in VARCHAR(42) NOT NULL,
    token_out VARCHAR(42) NOT NULL,
    amount_in DECIMAL(36,18) NOT NULL,
    target_price DECIMAL(36,18) NOT NULL,
    min_amount_out DECIMAL(36,18) NOT NULL,
    order_type VARCHAR(20) NOT NULL,
    is_long BOOLEAN,
    status VARCHAR(20) NOT NULL,
    self_executable BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    executed_at TIMESTAMP NULL,
    tx_hash VARCHAR(66),
    block_number BIGINT,
    executor_address VARCHAR(42) NULL,
    amount_out DECIMAL(36,18) NULL,
    execution_tx_hash VARCHAR(66) NULL
);"

if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders"
    exit 1
fi

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE INDEX IF NOT EXISTS idx_user_status ON orders (user_address, status);
CREATE INDEX IF NOT EXISTS idx_status_type ON orders (status, order_type);
CREATE INDEX IF NOT EXISTS idx_created_at ON orders (created_at);"

echo "‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è orders —Å–æ–∑–¥–∞–Ω—ã"

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE TABLE IF NOT EXISTS order_events
(
    id BIGSERIAL PRIMARY KEY,
    order_id BIGINT NOT NULL,
    event_type VARCHAR(30) NOT NULL,
    old_status VARCHAR(20),
    new_status VARCHAR(20),
    tx_hash VARCHAR(66),
    block_number BIGINT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    event_data JSONB
);"

if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_events —Å–æ–∑–¥–∞–Ω–∞"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã order_events"
    exit 1
fi

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE INDEX IF NOT EXISTS idx_order_events ON order_events (order_id, timestamp);"

echo "‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è order_events —Å–æ–∑–¥–∞–Ω—ã"

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE TABLE IF NOT EXISTS system_state
(
    id SERIAL PRIMARY KEY,
    component_name VARCHAR(50) UNIQUE NOT NULL,
    last_processed_block BIGINT NOT NULL,
    last_processed_tx_hash VARCHAR(66),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'ACTIVE'
);"

if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_state —Å–æ–∑–¥–∞–Ω–∞"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_state"
    exit 1
fi

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE INDEX IF NOT EXISTS idx_component ON system_state (component_name);"

echo "‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è system_state —Å–æ–∑–¥–∞–Ω—ã"

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE TABLE IF NOT EXISTS processed_events
(
    id BIGSERIAL PRIMARY KEY,
    tx_hash VARCHAR(66) NOT NULL,
    log_index INTEGER NOT NULL,
    event_type VARCHAR(30) NOT NULL,
    processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(tx_hash, log_index)
);"

if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ processed_events —Å–æ–∑–¥–∞–Ω–∞"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã processed_events"
    exit 1
fi

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
CREATE INDEX IF NOT EXISTS idx_processed_at ON processed_events (processed_at);"

echo "‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è processed_events —Å–æ–∑–¥–∞–Ω—ã"

HYPERTABLE_EXISTS=$(docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -tAc "SELECT 1 FROM timescaledb_information.hypertables WHERE hypertable_name='order_events'")

if [ "$HYPERTABLE_EXISTS" != "1" ]; then
    docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
    SELECT create_hypertable('order_events', 'timestamp', if_not_exists => TRUE);"

    if [ $? -eq 0 ]; then
        echo "‚úÖ TimescaleDB hypertable –¥–ª—è order_events —Å–æ–∑–¥–∞–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è hypertable –¥–ª—è order_events"
    fi
else
    echo "‚úÖ TimescaleDB hypertable –¥–ª—è order_events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

HYPERTABLE_EXISTS=$(docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -tAc "SELECT 1 FROM timescaledb_information.hypertables WHERE hypertable_name='processed_events'")

if [ "$HYPERTABLE_EXISTS" != "1" ]; then
    docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
    SELECT create_hypertable('processed_events', 'processed_at', if_not_exists => TRUE);"

    if [ $? -eq 0 ]; then
        echo "‚úÖ TimescaleDB hypertable –¥–ª—è processed_events —Å–æ–∑–¥–∞–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è hypertable –¥–ª—è processed_events"
    fi
else
    echo "‚úÖ TimescaleDB hypertable –¥–ª—è processed_events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ compression –¥–ª—è hypertables..."

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
ALTER TABLE order_events SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'order_id',
    timescaledb.compress_orderby = 'timestamp DESC'
);

ALTER TABLE processed_events SET (
    timescaledb.compress,
    timescaledb.compress_orderby = 'processed_at DESC'
);"

if [ $? -eq 0 ]; then
    echo "‚úÖ Compression –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ compression"
fi

echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ compression policies..."

docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
SELECT add_compression_policy('order_events', INTERVAL '7 days');
SELECT add_compression_policy('processed_events', INTERVAL '7 days');"

if [ $? -eq 0 ]; then
    echo "‚úÖ Compression policies –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è compression policies"
fi

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:"
docker exec crypto_timescaledb psql -U crypto_user -d crypto_data -c "
SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'public'
ORDER BY table_name;"

echo ""
echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö crypto_data —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è order_system"
echo "üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã order_system —Å–æ–∑–¥–∞–Ω—ã —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"
echo "‚ö° TimescaleDB –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
echo "üóúÔ∏è Compression policies –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"